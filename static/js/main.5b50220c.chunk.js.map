{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateGraph","reload","nodes","state","terminals","getCapacityValue","pipelineSource","totalCapacity","pipelines","filter","p","source","length","getAllocationValue","pipelineId","allocationValue","tab","operatorPipelines","allocations","shipper","opa","keys","map","cp","reduce","total","nominations","pipeline","nomination","objectSpread","ltype","value","color","trades","trade","counterparty","id","nominationValue","forEach","parseInt","volume","getNominationValue","capacity","overload","find","nom","console","log","name","allocation","concat","spareCapacities","spareValue","links","toConsumableArray","graphData","graphContainer","setAttribute","JSON","stringify","Date","getTime","updateOperatorPipelines","setState","getPipeLineById","getCounterPartyById","counterParties","getOperators","operators","res","accIndex","CPA","CPB","CPC","push","editTrade","form","isEditing","deleteTrade","tradeId","index","deletedTrades","slice","handleTrade","newTrade","findIndex","emptyForm","handleTradeFormChange","e","preventDefault","target","handleTerminalCapacityChange","terminalId","handleOperatorFormChange","counterPartyId","handleFlowDirection","configs","toggleFlow","canvasFlow","document","querySelector","classList","toggle","handleTabSwitch","handleConfigTabSwitch","ctab","handleSwitchShipper","month","operatorPipeline","bind","assertThisInitialized","getElementById","_this2","react_default","a","createElement","className","onClick","onChange","key","type","step","colSpan","operatorPipelineId","terminal","style","backgroundColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b50220c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.emptyForm = {\n      month: '',\n      volume: '',\n      pipeline: '',\n      counterparty: '',\n    };\n\n    this.counterParties = [\n      {\n        id: 'CPA',\n        name: 'Counterparty A',\n      },\n      {\n        id: 'CPB',\n        name: 'Counterparty B',\n      },\n      {\n        id: 'CPC',\n        name: 'Counterparty C',\n      },\n      {\n        id: 'CPD',\n        name: 'Counterparty D',\n      },\n    ];\n\n    this.pipelines = [\n      {\n        id: 'keystone-transcanada',\n        name: 'Keystone (TransCanada)',\n        source: 0,\n        target: 1,\n      },\n      {\n        id: 'marketlink-transcanada',\n        name: 'MarketLink (TransCanada)',\n        source: 1,\n        target: 2,\n      },\n      {\n        id: 'seaway-1',\n        name: 'Seaway 1',\n        source: 1,\n        target: 3,\n      },\n      {\n        id: 'seaway-2',\n        name: 'Seaway 2',\n        source: 3,\n        target: 4,\n      },\n      {\n        id: 'seaway-3',\n        name: 'Seaway 3',\n        source: 3,\n        target: 5,\n      },\n    ];\n\n    this.state = {\n      tab: 'shipper',\n      ctab: 'terminal',\n      shipper: 'CPA',\n      isEditing: false,\n      trades: [],\n      operatorPipelines: {},\n      configs: {\n        toggleFlow: false,\n      },\n      form: {\n        ...this.emptyForm,\n      },\n      terminals: [\n        {\n          id: 0,\n          name: 'Pakota',\n          totalCapacity: 200,\n          color: '#0074D9',\n        },\n        {\n          id: 1,\n          name: 'Cushing-Oklahoma',\n          totalCapacity: 200,\n          color: '#85144b',\n        },\n        {\n          id: 2,\n          name: 'Netherland-TX',\n          totalCapacity: 200,\n          color: '#39CCCC',\n        },\n        {\n          id: 3,\n          name: 'Enterprise-Jones-Creek',\n          totalCapacity: 200,\n          color: '#B10DC9',\n        },\n        {\n          id: 4,\n          name: 'Echo',\n          totalCapacity: 200,\n          color: '#001f3f',\n        },\n        {\n          id: 5,\n          name: 'Freeport-TX',\n          totalCapacity: 200,\n          color: '#2ECC40',\n        },\n      ],\n    };\n    this.pipelines.forEach((pipeline) => {\n      const operatorPipeline = {\n        ...pipeline,\n        nomination: 0,\n      };\n      operatorPipeline.allocations = {};\n      this.counterParties.forEach((cp) => {\n        operatorPipeline.allocations[cp.id] = 0;\n      });\n      this.state.operatorPipelines[pipeline.id] = operatorPipeline;\n    });\n    this.handleTradeFormChange = this.handleTradeFormChange.bind(this);\n    this.handleOperatorFormChange = this.handleOperatorFormChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.graphContainer = document.getElementById('us-pipeline-visualisation-container');\n    this.updateGraph();\n  }\n\n  updateGraph = (reload) => {\n    const nodes = this.state.terminals;\n\n    const getCapacityValue = (pipelineSource) => {\n      const { totalCapacity } = nodes[pipelineSource];\n      const commonSource = this.pipelines.filter(p => p.source === pipelineSource).length;\n      return totalCapacity / commonSource;\n    };\n    const getAllocationValue = (pipelineId) => {\n      let allocationValue = 0;\n      if (this.state.tab === 'shipper') {\n        allocationValue = this.state.operatorPipelines[pipelineId].allocations[this.state.shipper];\n      } else if (this.state.tab === 'operator') {\n        const opa = this.state.operatorPipelines[pipelineId].allocations;\n        allocationValue = Object.keys(opa).map(cp => opa[cp]).reduce((total, cp) => total + cp);\n      }\n      return allocationValue;\n    };\n    const getNominationValue = (pipelineId) => {\n      const trades = this.state.trades.filter(trade => trade.counterparty.id !== this.state.shipper);\n      let nominationValue = 0;\n      trades.forEach((trade) => {\n        if (trade.pipeline && trade.pipeline.id === pipelineId) {\n          nominationValue += parseInt(trade.volume);\n        }\n      });\n      return nominationValue;\n    };\n\n    const nominations = this.pipelines.map((pipeline) => {\n      const nomination = {\n        ltype: 'nomination',\n        ...pipeline,\n        value: 0,\n        color: '#0074D9',\n      };\n\n      nomination.value = getNominationValue(pipeline.id);\n      const allocationValue = getAllocationValue(pipeline.id);\n      const capacity = getCapacityValue(pipeline.source);\n\n      if (nomination.value > allocationValue) {\n        nomination.color = '#FF4136';\n        nomination.overload = nomination.value;\n        nomination.value = allocationValue < capacity ? allocationValue : capacity;\n      }\n\n      return nomination;\n    });\n\n    const allocations = this.pipelines.map((pipeline) => {\n      let allocationValue = getAllocationValue(pipeline.id);\n      const nomination = nominations.find(nom => nom.id === pipeline.id);\n      const capacity = getCapacityValue(pipeline.source);\n      console.log(pipeline.name, 'alloc', allocationValue, 'nom', nomination.value, 'capacity', capacity);\n\n      if (allocationValue >= nomination.value) {\n        allocationValue -= nomination.value;\n      }\n\n      const allocation = {\n        ...pipeline,\n        value: allocationValue,\n        id: `${pipeline.id}-allocation`,\n        name: `${pipeline.name} Allocation`,\n        color: '#FFDC00',\n      };\n\n      if (capacity - (nomination.value + allocationValue) < 0) {\n        allocation.overload = allocation.value;\n        allocation.value = capacity - nomination.value;\n        allocation.color = '#FF851B';\n      }\n\n      return allocation;\n    });\n\n    const spareCapacities = this.pipelines.map((pipeline) => {\n      let spareValue = 0;\n      let name = '';\n      if (this.state.tab === 'operator') {\n        name = `${pipeline.name} Spare Capacity`;\n      }\n\n      const allocationValue = getAllocationValue(pipeline.id);\n      const nomination = nominations.find(nom => nom.id === pipeline.id);\n      const capacity = getCapacityValue(pipeline.source);\n\n      if (capacity - (nomination.value + allocationValue) < 0) {\n        spareValue = 0;\n      } else {\n        spareValue = capacity - allocationValue;\n      }\n      console.log('SPARE', pipeline.name, 'alloc', allocationValue, 'nom', nomination.value, 'spare', spareValue, 'capacity', capacity);\n      return {\n        ...pipeline,\n        value: spareValue,\n        id: `${pipeline.id}-spare`,\n        name,\n        color: '#AAAAAA',\n      };\n    });\n\n    const links = [...spareCapacities, ...allocations, ...nominations];\n    const graphData = {\n      nodes,\n      links,\n    };\n    console.log('graphData', graphData);\n    this.graphContainer.setAttribute('data-init', JSON.stringify(graphData));\n    if (reload) {\n      this.graphContainer.setAttribute('data-reload', new Date().getTime());\n    }\n  }\n\n  updateOperatorPipelines = () => {\n    const operatorPipelines = this.state.operatorPipelines;\n    this.pipelines.forEach((pipeline) => {\n      let nomination = 0;\n      this.state.trades.forEach((trade) => {\n        if (trade.pipeline && trade.pipeline.id === pipeline.id) {\n          nomination += parseInt(trade.volume);\n        }\n      });\n      operatorPipelines[pipeline.id].nomination = nomination;\n    });\n    this.setState({ operatorPipelines });\n  }\n\n  getPipeLineById = id => this.pipelines.find(pipeline => pipeline.id === id)\n\n  getCounterPartyById = id => this.counterParties.find(cp => cp.id === id)\n\n  getOperators = () => {\n    const trades = this.state.trades;\n    const pipeline = this.state.pipelines;\n\n    const operators = [];\n    trades.reduce((res, trade) => {\n      const accIndex = res.pipeline.id;\n      if (!res[accIndex]) {\n        res[accIndex] = {\n          id: new Date().getTime(),\n          pipeline: res.pipeline.id,\n          nomination: 0,\n          allocations: {\n            CPA: 0,\n            CPB: 0,\n            CPC: 0,\n          },\n        };\n        operators.push(res[accIndex]);\n      }\n      res[accIndex].nomination += parseInt(trade.volume);\n      return res;\n    }, {});\n    return operators;\n  }\n\n  editTrade = (trade) => {\n    const form = { ...trade };\n    form.pipeline = trade.pipeline.id;\n    form.counterparty = trade.counterparty.id;\n    console.log('Trade Edited', form);\n    this.setState({\n      form,\n      isEditing: true,\n      editTrade: trade,\n    });\n  }\n\n  deleteTrade = (tradeId, index) => {\n    console.log('Trade Deleted', tradeId);\n    const trades = this.state.trades;\n    const deletedTrades = trades.filter((trade, index) => trade.id !== tradeId);\n    console.log('deleted trades', deletedTrades);\n    this.setState({\n      trades: deletedTrades.slice(0),\n      isEditing: false,\n    }, () => {\n      this.updateOperatorPipelines();\n      this.updateGraph();\n    });\n  }\n\n  handleTrade = (tradeId) => {\n    console.log('Trade Submitted');\n\n    const newTrade = { ...this.state.form };\n    newTrade.pipeline = this.getPipeLineById(this.state.form.pipeline);\n    newTrade.counterparty = this.getCounterPartyById(this.state.form.counterparty);\n    // TODO validation\n    const trades = this.state.trades;\n    if (this.state.isEditing) {\n      const editTrade = this.state.editTrade;\n      const editTradeIndex = this.state.trades.findIndex(trade => trade.id === editTrade.id);\n      trades[editTradeIndex] = newTrade;\n    } else {\n      newTrade.id = new Date().getTime();\n      trades.push(newTrade);\n    }\n\n    this.setState({\n      ...trades,\n      isEditing: false,\n      form: { ...this.emptyForm },\n    }, () => {\n      console.log(this.state);\n      this.updateOperatorPipelines();\n      this.updateGraph();\n    });\n  }\n\n  handleTradeFormChange = (e) => {\n    e.preventDefault();\n    const target = e.target;\n    const form = this.state.form;\n    form[target.name] = target.value;\n    this.setState({\n      form: { ...form },\n    });\n  }\n\n  handleTerminalCapacityChange = (e, terminalId) => {\n    e.preventDefault();\n    const target = e.target;\n    const terminals = this.state.terminals;\n    terminals[terminalId].totalCapacity = target.value;\n    this.setState({\n      terminals,\n    }, () => {\n      this.updateGraph(true); // reload\n    });\n  }\n\n  handleOperatorFormChange = (e, pipelineId, counterPartyId) => {\n    e.preventDefault();\n    const target = e.target;\n    const operatorPipelines = this.state.operatorPipelines;\n    operatorPipelines[pipelineId].allocations[counterPartyId] = parseInt(target.value);\n    this.setState({ operatorPipelines }, () => {\n      this.updateGraph();\n    });\n  }\n\n  handleFlowDirection = (e) => {\n    const configs = this.state.configs;\n    configs.toggleFlow = !configs.toggleFlow;\n    this.setState({\n      configs,\n    });\n    const canvasFlow = document.querySelector('.sk-canvas');\n    canvasFlow && canvasFlow.classList.toggle('canvas-hidden');\n  }\n\n  handleTabSwitch = (tab) => {\n    this.setState({ tab }, () => {\n      this.updateGraph();\n    });\n  }\n\n  handleConfigTabSwitch = (ctab) => {\n    this.setState({ ctab });\n  };\n\n  handleSwitchShipper = (e) => {\n    e.preventDefault();\n    const target = e.target;\n    this.setState({\n      shipper: target.value,\n    }, () => {\n      this.updateGraph();\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header container is-fluid\">\n          <div className=\"columns\">\n            <div className=\"column is-8\">\n              <div className=\"box\">\n                <div className=\"tabs\">\n                  <ul className=\"tabs-ops\">\n                    <li className={this.state.tab === 'shipper' ? 'is-active' : ''}>\n                      <a onClick={() => { this.handleTabSwitch('shipper'); }}>Supplier</a>\n                    </li>\n                    <li className={this.state.tab === 'operator' ? 'is-active' : ''}>\n                      <a onClick={() => { this.handleTabSwitch('operator'); }}>Operator</a>\n                    </li>\n                    <div className=\"shipper-selector\">\n                      <span>Shipper:</span>\n                      <div className=\"select\">\n                        <select name=\"counterparty\" value={this.state.shipper} onChange={this.handleSwitchShipper}>\n                          {this.counterParties.map(cp => (\n                            <option value={cp.id} key={cp.id}>{cp.name}</option>\n                          ))}\n                        </select>\n                      </div>\n                    </div>\n                  </ul>\n                </div>\n                {this.state.tab === 'shipper' && (\n                <div className=\"tab-content-shipper\">\n                  <h1 className=\"box__heading\">Trade History</h1>\n                  <form>\n                    <table className=\"table is-striped is-fullwidth\">\n                      <thead>\n                        <tr>\n                          <th>Month</th>\n                          <th>Volume</th>\n                          <th>Pipeline</th>\n                          <th>Counterparty</th>\n                          <th />\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {this.state.trades && this.state.trades.filter(trade => trade.counterparty.id !== this.state.shipper).map((trade, index) => (\n                          <tr key={trade.id}>\n\n                            <td>\n                              {trade.month}\n                            </td>\n\n                            <td>\n                              {trade.volume}\n                            </td>\n\n                            <td>\n                              {trade.pipeline && trade.pipeline.name}\n                            </td>\n\n                            <td>\n                              {trade.counterparty && trade.counterparty.name}\n                            </td>\n                            <td>\n                              <div className=\"field is-grouped\">\n                                <p className=\"control\">\n                                  <button name=\"edit-button\" className=\"button is-warning is-small\" onClick={() => { this.editTrade(trade); }} type=\"button\">Edit</button>\n                                </p>\n                                <p className=\"control\">\n                                  <button name=\"delete-button\" className=\"button is-danger is-small\" onClick={() => { this.deleteTrade(trade.id, index); }} type=\"button\">Delete</button>\n                                </p>\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                        <tr>\n                          <td>\n                            <input className=\"input is-fullwidth\" type=\"date\" name=\"month\" value={this.state.form.month} onChange={this.handleTradeFormChange} />\n                          </td>\n                          <td>\n                            <input className=\"input is-fullwidth\" type=\"number\" step=\"100\" name=\"volume\" value={this.state.form.volume} onChange={this.handleTradeFormChange} />\n                          </td>\n                          <td>\n                            <div className=\"select is-fullwidth\">\n                              <select name=\"pipeline\" value={this.state.form.pipeline} onChange={this.handleTradeFormChange}>\n                                <option>Select Pipeline</option>\n                                {this.pipelines.map(pipeline => (\n                                  <option value={pipeline.id} key={pipeline.id}>{pipeline.name}</option>\n                                ))}\n                              </select>\n                            </div>\n                          </td>\n                          <td colSpan=\"2\">\n                            <div className=\"select is-fullwidth\">\n                              <select name=\"counterparty\" value={this.state.form.counterparty} onChange={this.handleTradeFormChange}>\n                                <option>Select Counterparty</option>\n                                {this.counterParties.filter(cp => cp.id !== this.state.shipper).map(cp => (\n                                  <option value={cp.id} key={cp.id}>{cp.name}</option>\n                                ))}\n                              </select>\n                            </div>\n                          </td>\n                          <td />\n                        </tr>\n                      </tbody>\n                    </table>\n                    <button className={`button ${this.state.isEditing ? 'is-warning' : 'is-primary'}`} type=\"button\" name=\"submit-button\" onClick={() => { this.handleTrade(); }}>\n                      {this.state.isEditing ? 'Edit Trade' : 'Save Trade'}\n                    </button>\n                  </form>\n                </div>\n                )}\n                {this.state.tab === 'operator' && (\n                <div className=\"tab-content-operator\">\n                  <h1 className=\"box__heading\">Pipeline Allocation</h1>\n                  <form>\n                    <table className=\"table is-striped is-fullwidth\">\n                      <thead>\n                        <tr>\n                          <th>Pipeline</th>\n                          <th>Nominations</th>\n                          {this.counterParties.map(cp => (\n                            <th>{cp.name}</th>\n                          ))}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {Object.keys(this.state.operatorPipelines).map((operatorPipelineId) => {\n                          const operatorPipeline = this.state.operatorPipelines[operatorPipelineId];\n                          return (\n                            <tr key={operatorPipeline.id}>\n                              <td>\n                                {operatorPipeline.name}\n                              </td>\n                              <td>\n                                {operatorPipeline.nomination}\n                              </td>\n                              {this.counterParties.map(cp => (\n                                <td key={`${operatorPipelineId}-${cp.id}`}>\n                                  <input className=\"input is-fullwidth\" type=\"number\" step=\"100\" name=\"allocation\" value={operatorPipeline.allocations[cp.id]} onChange={(e) => { this.handleOperatorFormChange(e, operatorPipeline.id, cp.id); }} />\n                                </td>\n                              ))}\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </form>\n                </div>\n                )}\n              </div>\n            </div>\n            <div className=\"column is-4\">\n              <div className=\"box\">\n                <div className=\"tabs\">\n                  <ul>\n                    <li className={this.state.ctab === 'terminal' ? 'is-active' : ''}><a onClick={() => { this.handleConfigTabSwitch('terminal'); }}>Terminals</a></li>\n                    <li className={this.state.ctab === 'config' ? 'is-active' : ''}><a onClick={() => { this.handleConfigTabSwitch('config'); }}>Configs</a></li>\n                  </ul>\n                </div>\n                {this.state.ctab === 'terminal' && (\n                  <div>\n                    <table className=\"table is-fullwidth\">\n                      <tbody>\n                        {this.state.terminals.map(terminal => (\n                          <tr key={terminal.name}>\n                            <td><span className=\"terminal-color\" style={{ backgroundColor: terminal.color }} /> <span>{terminal.name}</span></td>\n                            <td>\n                              <input className=\"input has-text-right\" type=\"number\" step=\"100\" name=\"terminal-name\" value={terminal.totalCapacity} onChange={(e) => { this.handleTerminalCapacityChange(e, terminal.id); }} />\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n                {this.state.ctab === 'config' && (\n                  <div>\n                    <h1 className=\"box__heading\">Configure Settings</h1>\n                    <div className=\"field is-grouped\">\n                      <p className=\"control\">\n                        <button className=\"button is-info\" onClick={this.handleFlowDirection}>{this.state.configs.toggleFlow ? 'Hide' : 'Show'} Flow</button>\n                      </p>\n                      <p className=\"control\">\n                        <button className=\"button is-info\" onClick={() => { this.updateGraph(true); }}>Reload Graph</button>\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}