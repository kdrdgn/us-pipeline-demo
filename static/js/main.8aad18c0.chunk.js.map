{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateGraph","reload","nodes","state","terminals","getCapacityValue","pipelineSource","totalCapacity","pipelines","filter","p","source","length","getAllocationValue","pipelineId","allocationValue","tab","operatorPipelines","allocations","shipper","opa","keys","map","cp","reduce","total","nominations","pipeline","nomination","objectSpread","ltype","value","color","trades","forEach","trade","id","parseInt","volume","capacity","overload","find","nom","console","log","name","allocation","concat","spareCapacities","spareValue","links","toConsumableArray","graphData","graphContainer","setAttribute","JSON","stringify","Date","getTime","updateOperatorPipelines","setState","getPipeLineById","getCounterPartyById","counterParties","getOperators","operators","res","accIndex","CPA","CPB","CPC","push","editTrade","form","counterparty","isEditing","deleteTrade","tradeId","index","deletedTrades","slice","handleTrade","newTrade","findIndex","emptyForm","handleTradeFormChange","e","preventDefault","target","handleTerminalCapacityChange","terminalId","handleOperatorFormChange","counterPartyId","handleFlowDirection","configs","toggleFlow","canvasFlow","document","querySelector","classList","toggle","handleTabSwitch","handleConfigTabSwitch","ctab","month","operatorPipeline","bind","assertThisInitialized","getElementById","_this2","react_default","a","createElement","className","onClick","key","type","onChange","step","colSpan","operatorPipelineId","terminal","style","backgroundColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8aad18c0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.emptyForm = {\n      month: '',\n      volume: '',\n      pipeline: '',\n      counterparty: '',\n    };\n\n    this.counterParties = [\n      {\n        id: 'CPA',\n        name: 'Counterparty A',\n      },\n      {\n        id: 'CPB',\n        name: 'Counterparty B',\n      },\n      {\n        id: 'CPC',\n        name: 'Counterparty C',\n      },\n    ];\n\n    this.pipelines = [\n      {\n        id: 'keystone-transcanada',\n        name: 'Keystone (TransCanada)',\n        source: 0,\n        target: 1,\n      },\n      {\n        id: 'marketlink-transcanada',\n        name: 'MarketLink (TransCanada)',\n        source: 1,\n        target: 2,\n      },\n      {\n        id: 'seaway-1',\n        name: 'Seaway 1',\n        source: 1,\n        target: 3,\n      },\n      {\n        id: 'seaway-2',\n        name: 'Seaway 2',\n        source: 3,\n        target: 4,\n      },\n      {\n        id: 'seaway-3',\n        name: 'Seaway 3',\n        source: 3,\n        target: 5,\n      },\n    ];\n\n    this.state = {\n      tab: 'shipper',\n      ctab: 'terminal',\n      shipper: 'CPA',\n      isEditing: false,\n      trades: [],\n      operatorPipelines: {},\n      configs: {\n        toggleFlow: false,\n      },\n      form: {\n        ...this.emptyForm,\n      },\n      terminals: [\n        {\n          id: 0,\n          name: 'Pakota',\n          totalCapacity: 200,\n          color: '#0074D9',\n        },\n        {\n          id: 1,\n          name: 'Cushing-Oklahoma',\n          totalCapacity: 200,\n          color: '#85144b',\n        },\n        {\n          id: 2,\n          name: 'Netherland-TX',\n          totalCapacity: 200,\n          color: '#39CCCC',\n        },\n        {\n          id: 3,\n          name: 'Enterprise-Jones-Creek',\n          totalCapacity: 200,\n          color: '#B10DC9',\n        },\n        {\n          id: 4,\n          name: 'Echo',\n          totalCapacity: 200,\n          color: '#001f3f',\n        },\n        {\n          id: 5,\n          name: 'Freeport-TX',\n          totalCapacity: 200,\n          color: '#2ECC40',\n        },\n      ],\n    };\n    this.pipelines.forEach((pipeline) => {\n      const operatorPipeline = {\n        ...pipeline,\n        nomination: 0,\n      };\n      operatorPipeline.allocations = {};\n      this.counterParties.forEach((cp) => {\n        operatorPipeline.allocations[cp.id] = 0;\n      });\n      this.state.operatorPipelines[pipeline.id] = operatorPipeline;\n    });\n    this.handleTradeFormChange = this.handleTradeFormChange.bind(this);\n    this.handleOperatorFormChange = this.handleOperatorFormChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.graphContainer = document.getElementById('us-pipeline-visualisation-container');\n    this.updateGraph();\n  }\n\n  updateGraph = (reload) => {\n    const nodes = this.state.terminals;\n\n    const getCapacityValue = (pipelineSource) => {\n      const { totalCapacity } = nodes[pipelineSource];\n      const commonSource = this.pipelines.filter(p => p.source === pipelineSource).length;\n      return totalCapacity / commonSource;\n    };\n    const getAllocationValue = (pipelineId) => {\n      let allocationValue = 0;\n      if (this.state.tab === 'shipper') {\n        allocationValue = this.state.operatorPipelines[pipelineId].allocations[this.state.shipper];\n      } else if (this.state.tab === 'operator') {\n        const opa = this.state.operatorPipelines[pipelineId].allocations;\n        allocationValue = Object.keys(opa).map(cp => opa[cp]).reduce((total, cp) => total + cp);\n      }\n      return allocationValue;\n    };\n\n    const nominations = this.pipelines.map((pipeline) => {\n      const nomination = {\n        ltype: 'nomination',\n        ...pipeline,\n        value: 0,\n        color: '#0074D9',\n      };\n      this.state.trades.forEach((trade) => {\n        if (trade.pipeline && trade.pipeline.id === pipeline.id) {\n          nomination.value += parseInt(trade.volume);\n        }\n      });\n\n      const allocationValue = getAllocationValue(pipeline.id);\n      const capacity = getCapacityValue(pipeline.source);\n\n      if (nomination.value > allocationValue) {\n        nomination.color = '#FF4136';\n        nomination.overload = nomination.value;\n        nomination.value = allocationValue < capacity ? allocationValue : capacity;\n      }\n\n      return nomination;\n    });\n\n    const allocations = this.pipelines.map((pipeline) => {\n      let allocationValue = getAllocationValue(pipeline.id);\n      const nomination = nominations.find(nom => nom.id === pipeline.id);\n      const capacity = getCapacityValue(pipeline.source);\n      console.log(pipeline.name, 'alloc', allocationValue, 'nom', nomination.value, 'capacity', capacity);\n\n      if (allocationValue >= nomination.value) {\n        allocationValue -= nomination.value;\n      }\n\n      const allocation = {\n        ...pipeline,\n        value: allocationValue,\n        id: `${pipeline.id}-allocation`,\n        name: `${pipeline.name} Allocation`,\n        color: '#FFDC00',\n      };\n\n      if (capacity - (nomination.value + allocationValue) < 0) {\n        allocation.overload = allocation.value;\n        allocation.value = capacity - nomination.value;\n        allocation.color = '#FF851B';\n      }\n\n      return allocation;\n    });\n\n    const spareCapacities = this.pipelines.map((pipeline) => {\n      let spareValue = 0;\n      let name = '';\n      if (this.state.tab === 'operator') {\n        name = `${pipeline.name} Spare Capacity`;\n      }\n\n      const allocationValue = getAllocationValue(pipeline.id);\n      const nomination = nominations.find(nom => nom.id === pipeline.id);\n      const capacity = getCapacityValue(pipeline.source);\n\n      if (capacity - (nomination.value + allocationValue) < 0) {\n        spareValue = 0;\n      } else {\n        spareValue = capacity - allocationValue;\n      }\n      console.log('SPARE', pipeline.name, 'alloc', allocationValue, 'nom', nomination.value, 'spare', spareValue, 'capacity', capacity);\n      return {\n        ...pipeline,\n        value: spareValue,\n        id: `${pipeline.id}-spare`,\n        name,\n        color: '#AAAAAA',\n      };\n    });\n\n    const links = [...spareCapacities, ...allocations, ...nominations];\n    const graphData = {\n      nodes,\n      links,\n    };\n    console.log('graphData', graphData);\n    this.graphContainer.setAttribute('data-init', JSON.stringify(graphData));\n    if (reload) {\n      this.graphContainer.setAttribute('data-reload', new Date().getTime());\n    }\n  }\n\n  updateOperatorPipelines = () => {\n    const operatorPipelines = this.state.operatorPipelines;\n    this.pipelines.forEach((pipeline) => {\n      let nomination = 0;\n      this.state.trades.forEach((trade) => {\n        if (trade.pipeline && trade.pipeline.id === pipeline.id) {\n          nomination += parseInt(trade.volume);\n        }\n      });\n      operatorPipelines[pipeline.id].nomination = nomination;\n    });\n    this.setState({ operatorPipelines });\n  }\n\n  getPipeLineById = id => this.pipelines.find(pipeline => pipeline.id === id)\n\n  getCounterPartyById = id => this.counterParties.find(cp => cp.id === id)\n\n  getOperators = () => {\n    const trades = this.state.trades;\n    const pipeline = this.state.pipelines;\n\n    const operators = [];\n    trades.reduce((res, trade) => {\n      const accIndex = res.pipeline.id;\n      if (!res[accIndex]) {\n        res[accIndex] = {\n          id: new Date().getTime(),\n          pipeline: res.pipeline.id,\n          nomination: 0,\n          allocations: {\n            CPA: 0,\n            CPB: 0,\n            CPC: 0,\n          },\n        };\n        operators.push(res[accIndex]);\n      }\n      res[accIndex].nomination += parseInt(trade.volume);\n      return res;\n    }, {});\n    return operators;\n  }\n\n  editTrade = (trade) => {\n    const form = { ...trade };\n    form.pipeline = trade.pipeline.id;\n    form.counterparty = trade.counterparty.id;\n    console.log('Trade Edited', form);\n    this.setState({\n      form,\n      isEditing: true,\n      editTrade: trade,\n    });\n  }\n\n  deleteTrade = (tradeId, index) => {\n    console.log('Trade Deleted', tradeId);\n    const trades = this.state.trades;\n    const deletedTrades = trades.filter((trade, index) => trade.id !== tradeId);\n    console.log('deleted trades', deletedTrades);\n    this.setState({\n      trades: deletedTrades.slice(0),\n      isEditing: false,\n    }, () => {\n      this.updateOperatorPipelines();\n      this.updateGraph();\n    });\n  }\n\n  handleTrade = (tradeId) => {\n    console.log('Trade Submitted');\n\n    const newTrade = { ...this.state.form };\n    newTrade.pipeline = this.getPipeLineById(this.state.form.pipeline);\n    newTrade.counterparty = this.getCounterPartyById(this.state.form.counterparty);\n    // TODO validation\n    const trades = this.state.trades;\n    if (this.state.isEditing) {\n      const editTrade = this.state.editTrade;\n      const editTradeIndex = this.state.trades.findIndex(trade => trade.id === editTrade.id);\n      trades[editTradeIndex] = newTrade;\n    } else {\n      newTrade.id = new Date().getTime();\n      trades.push(newTrade);\n    }\n\n    this.setState({\n      ...trades,\n      isEditing: false,\n      form: { ...this.emptyForm },\n    }, () => {\n      console.log(this.state);\n      this.updateOperatorPipelines();\n      this.updateGraph();\n    });\n  }\n\n  handleTradeFormChange = (e) => {\n    e.preventDefault();\n    const target = e.target;\n    const form = this.state.form;\n    form[target.name] = target.value;\n    this.setState({\n      form: { ...form },\n    });\n  }\n\n  handleTerminalCapacityChange = (e, terminalId) => {\n    e.preventDefault();\n    const target = e.target;\n    const terminals = this.state.terminals;\n    terminals[terminalId].totalCapacity = target.value;\n    this.setState({\n      terminals,\n    }, () => {\n      this.updateGraph(true); // reload\n    });\n  }\n\n  handleOperatorFormChange = (e, pipelineId, counterPartyId) => {\n    e.preventDefault();\n    const target = e.target;\n    const operatorPipelines = this.state.operatorPipelines;\n    operatorPipelines[pipelineId].allocations[counterPartyId] = parseInt(target.value);\n    this.setState({ operatorPipelines }, () => {\n      this.updateGraph();\n    });\n  }\n\n  handleFlowDirection = (e) => {\n    const configs = this.state.configs;\n    configs.toggleFlow = !configs.toggleFlow;\n    this.setState({\n      configs,\n    });\n    const canvasFlow = document.querySelector('.sk-canvas');\n    canvasFlow && canvasFlow.classList.toggle('canvas-hidden');\n  }\n\n  handleTabSwitch = (tab) => {\n    this.setState({ tab }, () => {\n      this.updateGraph();\n    });\n  }\n\n  handleConfigTabSwitch = (ctab) => {\n    this.setState({ ctab });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header container is-fluid\">\n          <div className=\"columns\">\n            <div className=\"column is-8\">\n              <div className=\"box\">\n                <div className=\"tabs\">\n                  <ul>\n                    <li className={this.state.tab === 'shipper' ? 'is-active' : ''}><a onClick={() => { this.handleTabSwitch('shipper'); }}>Supplier</a></li>\n                    <li className={this.state.tab === 'operator' ? 'is-active' : ''}><a onClick={() => { this.handleTabSwitch('operator'); }}>Operator</a></li>\n                  </ul>\n                </div>\n                {this.state.tab === 'shipper' && (\n                <div className=\"tab-content-shipper\">\n                  <h1 className=\"box__heading\">Trade History</h1>\n                  <form>\n                    <table className=\"table is-striped is-fullwidth\">\n                      <thead>\n                        <tr>\n                          <th>Month</th>\n                          <th>Volume</th>\n                          <th>Pipeline</th>\n                          <th>Counterparty</th>\n                          <th />\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {this.state.trades && this.state.trades.map((trade, index) => (\n                          <tr key={trade.id}>\n\n                            <td>\n                              {trade.month}\n                            </td>\n\n                            <td>\n                              {trade.volume}\n                            </td>\n\n                            <td>\n                              {trade.pipeline && trade.pipeline.name}\n                            </td>\n\n                            <td>\n                              {trade.counterparty && trade.counterparty.name}\n                            </td>\n                            <td>\n                              <div className=\"field is-grouped\">\n                                <p className=\"control\">\n                                  <button name=\"edit-button\" className=\"button is-warning is-small\" onClick={() => { this.editTrade(trade); }} type=\"button\">Edit</button>\n                                </p>\n                                <p className=\"control\">\n                                  <button name=\"delete-button\" className=\"button is-danger is-small\" onClick={() => { this.deleteTrade(trade.id, index); }} type=\"button\">Delete</button>\n                                </p>\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                        <tr>\n                          <td>\n                            <input className=\"input is-fullwidth\" type=\"date\" name=\"month\" value={this.state.form.month} onChange={this.handleTradeFormChange} />\n                          </td>\n                          <td>\n                            <input className=\"input is-fullwidth\" type=\"number\" step=\"100\" name=\"volume\" value={this.state.form.volume} onChange={this.handleTradeFormChange} />\n                          </td>\n                          <td>\n                            <div className=\"select is-fullwidth\">\n                              <select name=\"pipeline\" value={this.state.form.pipeline} onChange={this.handleTradeFormChange}>\n                                <option>Select Pipeline</option>\n                                {this.pipelines.map(pipeline => (\n                                  <option value={pipeline.id} key={pipeline.id}>{pipeline.name}</option>\n                                ))}\n                              </select>\n                            </div>\n                          </td>\n                          <td colSpan=\"2\">\n                            <div className=\"select is-fullwidth\">\n                              <select name=\"counterparty\" value={this.state.form.counterparty} onChange={this.handleTradeFormChange}>\n                                <option>Select Counterparty</option>\n                                {this.counterParties.map(cp => (\n                                  <option value={cp.id} key={cp.id}>{cp.name}</option>\n                                ))}\n                              </select>\n                            </div>\n                          </td>\n                          <td />\n                        </tr>\n                      </tbody>\n                    </table>\n                    <button className={`button ${this.state.isEditing ? 'is-warning' : 'is-primary'}`} type=\"button\" name=\"submit-button\" onClick={() => { this.handleTrade(); }}>\n                      {this.state.isEditing ? 'Edit Trade' : 'Save Trade'}\n                    </button>\n                  </form>\n                </div>\n                )}\n                {this.state.tab === 'operator' && (\n                <div className=\"tab-content-operator\">\n                  <h1 className=\"box__heading\">Pipeline Allocation</h1>\n                  <form>\n                    <table className=\"table is-striped is-fullwidth\">\n                      <thead>\n                        <tr>\n                          <th>Pipeline</th>\n                          <th>Nominations</th>\n                          <th>Allocation (Counterparty A)</th>\n                          <th>Allocation (Counterparty B)</th>\n                          <th>Allocation (Counterparty C)</th>\n                          <th />\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {Object.keys(this.state.operatorPipelines).map((operatorPipelineId) => {\n                          const operatorPipeline = this.state.operatorPipelines[operatorPipelineId];\n                          return (\n                            <tr key={operatorPipeline.id}>\n                              <td>\n                                {operatorPipeline.name}\n                              </td>\n                              <td>\n                                {operatorPipeline.nomination}\n                              </td>\n                              {this.counterParties.map(cp => (\n                                <td key={`${operatorPipelineId}-${cp.id}`}>\n                                  <input className=\"input is-fullwidth\" type=\"number\" step=\"100\" name=\"allocation\" value={operatorPipeline.allocations[cp.id]} onChange={(e) => { this.handleOperatorFormChange(e, operatorPipeline.id, cp.id); }} />\n                                </td>\n                              ))}\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </form>\n                </div>\n                )}\n              </div>\n            </div>\n            <div className=\"column is-4\">\n              <div className=\"box\">\n                <div className=\"tabs\">\n                  <ul>\n                    <li className={this.state.ctab === 'terminal' ? 'is-active' : ''}><a onClick={() => { this.handleConfigTabSwitch('terminal'); }}>Terminals</a></li>\n                    <li className={this.state.ctab === 'config' ? 'is-active' : ''}><a onClick={() => { this.handleConfigTabSwitch('config'); }}>Configs</a></li>\n                  </ul>\n                </div>\n                {this.state.ctab === 'terminal' && (\n                  <div>\n                    <table className=\"table is-fullwidth\">\n                      <tbody>\n                        {this.state.terminals.map(terminal => (\n                          <tr key={terminal.name}>\n                            <td><span className=\"terminal-color\" style={{ backgroundColor: terminal.color }} /> <span>{terminal.name}</span></td>\n                            <td>\n                              <input className=\"input has-text-right\" type=\"number\" step=\"100\" name=\"terminal-name\" value={terminal.totalCapacity} onChange={(e) => { this.handleTerminalCapacityChange(e, terminal.id); }} />\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n                {this.state.ctab === 'config' && (\n                  <div>\n                    <h1 className=\"box__heading\">Configure Settings</h1>\n                    <div className=\"field is-grouped\">\n                      <p className=\"control\">\n                        <button className=\"button is-info\" onClick={this.handleFlowDirection}>{this.state.configs.toggleFlow ? 'Hide' : 'Show'} Flow</button>\n                      </p>\n                      <p className=\"control\">\n                        <button className=\"button is-info\" onClick={() => { this.updateGraph(true); }}>Reload Graph</button>\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}